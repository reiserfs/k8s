#!/usr/bin/python3
# Create a inventory file based on json output of Terraform tfstate
# Thiago Melo - 2022
# https://github.com/reiserfs/k8s
# Usage: terraform-ansible-inventory --file terraform.tfstate --output=true
#
import json
import os
from configparser import ConfigParser
import argparse

ansible_inventory='../ansible/inventory'

parser = argparse.ArgumentParser()
parser.add_argument('--file', help='file help')
parser.add_argument('--output', default="false", help='output')
args = parser.parse_args()

inventory = ConfigParser()

os.system('terraform show -json ' + args.file + '| jq > jq.json')

with open('jq.json', "r") as f:
    data = json.load(f)

for i in data['values']['root_module']['resources']:
    if i['type'] == "google_compute_instance":
        if not inventory.has_section(i['name']):
            inventory.add_section(i['name'])
        inventory.set(i['name'], i['values']['name'] + ' ' + 'ansible_host', i['values']['network_interface'][0]['access_config'][0]['nat_ip'])
    if i['type'] == "oci_core_instance":
        if not inventory.has_section(i['name']):
            inventory.add_section(i['name'])
        inventory.set(i['name'], i['values']['display_name'] + ' ' + 'ansible_host', i['values']['public_ip'])
with open(ansible_inventory, 'w') as configfile:
    inventory.write(configfile, space_around_delimiters=False)

if args.output=='true':
    print(open(ansible_inventory, "r").read())
